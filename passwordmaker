#!/bin/bash

####COPYRIGHT NOTICE#####COPYRIGHT NOTICE#####COPYRIGHT NOTICE#####COPYRIGHT NOTICE#####COPYRIGHT NOTICE#####COPYRIGHT NOTICE####
#Copyright (C) 2018 exarobibliologst (github.com/exarobibliologist)                                                             #
#                                                                                                                               #
#This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License      #
#as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.          #
#                                                                                                                               #
#This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of #
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.                     #
#                                                                                                                               #
#You should have received a copy of the GNU General Public License along with this program; if not, write to the                #
#Free Software Foundation, Inc.                                                                                                 #
#51 Franklin Street, Fifth Floor,                                                                                               #
#Boston, MA  02110-1301, USA.                                                                                                   #
#################################################################################################################################

function passwordmaker()
{
clear
if ! dpkg -l | grep -q makepasswd; then sudo aptitude install -Pr makepasswd; fi
clear
echo -e "(This script runs 14 iterations to generate a variety of passwords.\nYou will get 14x the number you enter here. I reccommend you keep the number under 20 to avoid too much lag.)\nHow many passwords?"
read num
echo "Minimum length of each password?"
read minimum
echo "Maximum length?"
read maximum
clear
Numbers="1234567890"
Lowers="qwertyuiopasdfghjklzxcvbnm"
Uppers="QWERTYUIOPASDFGHJKLZXCVBNM"
Symbols="!@#$%^&*();:<>/?"
echo -e "Numbers, Lowercase, Uppercase, Symbols" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Numbers$Lowers$Uppers$Symbols" --crypt-md5 >> passwordmakerfile
echo -e "\nNumbers, Lowercase, Symbols" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Numbers$Lowers$Symbols" --crypt-md5 >> passwordmakerfile
echo -e "\nNumbers, Lowercase, Uppercase" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Numbers$Lowers$Uppers" --crypt-md5 >> passwordmakerfile
echo -e "\nNumbers, Symbols" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Numbers$Symbols" --crypt-md5 >> passwordmakerfile
echo -e "\nNumbers, Uppercase" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Numbers$Uppers" --crypt-md5 >> passwordmakerfile
echo -e "\nNumbers, Lowercase" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Numbers$Lowers" --crypt-md5 >> passwordmakerfile
echo -e "\nNumbers" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Numbers" --crypt-md5 >> passwordmakerfile
echo -e "\nLowercase, Uppercase, Symbols" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Lowers$Uppers$Symbols" --crypt-md5 >> passwordmakerfile
echo -e "\nLowercase, Symbols" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Lowers$Symbols" --crypt-md5 >> passwordmakerfile
echo -e "\nLowercase, Uppercase" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Lowers$Uppers" --crypt-md5 >> passwordmakerfile
echo -e "\nLowercase" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Lowers" --crypt-md5 >> passwordmakerfile
echo -e "\nUppercase, Symbols" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Uppers$Symbols" --crypt-md5 >> passwordmakerfile
echo -e "\nUppercase" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Uppers" --crypt-md5 >> passwordmakerfile
echo -e "\nSymbols" >> passwordmakerfile
makepasswd --count $num --minchars $minimum --maxchars $maximum --string "$Symbols" --crypt-md5 >> passwordmakerfile
}

function lefthandpasses()
{
</dev/urandom tr -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvZXCV' | head -c $length; echo ""
}

function righthandpasses()
{
</dev/urandom tr -dc '67890^&*()uiopUIOPhjklHJKLbnm,.BNM<>' | head -c $length; echo ""
}

function psuedorandompasses()
{
< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c $length;echo;
}

function hexadecimalpasses()
{
</dev/urandom tr -dc [:xdigit:] | head -c $length; echo ""
}

function createpass()
{
echo "How many passwords?"
read num
echo "How long should the passwords be in length?"
read length

echo -e "The following selections are available to you."
select passchoice in "Left Hand" "Right Hand" "Pseudorandom" "Hexadecimal" "Quit Without Selection"
do
	case "$passchoice" in
			"Left Hand")
				for ((i = 0; i < num; ++i))
                                        do
                                                lefthandpasses >> LeftHandPasswordSheet
                                        done
                        return
			;;
			"Right Hand")
                                for ((i = 0; i < num; ++i))
                                        do
                                                righthandpasses >> RightHandPasswordSheet
                                        done
				return
			;;
			"Pseudorandom")
                                for ((i = 0; i < num; ++i))
                                        do
                                                psuedorandompasses >> PsuedoRandomPasswordSheet
                                        done
				return
			;;
			"Hexadecimal")
                                for ((i = 0; i < num; ++i))
                                        do
                                                hexadecimalpasses >> HexadecimalPasswordSheet
                                        done
				return
                        ;;
			"Quit Without Selection")
                                exit 1
				return
			;;
	esac
done
}
