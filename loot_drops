#!/bin/bash

# Function for loot drops with quantity input and unique items
loot_drop() {
    # Check if a valid number of drops is provided
    if [[ -z "$1" || ! "$1" =~ ^[0-9]+$ || "$1" -le 0 ]]; then
        echo "Usage: loot_drop <number_of_drops>"
        return 1
    fi

    local num_drops=$1  # Number of loot items to drop

    # Loot arrays based on rarity
    RANGED=("Ranged Weapon" "Pistol" "Blaster Pistol")
    MELEE=("Melee Weapon" "Generic Whip" "Dagger" "Sword" "Flail" "Nightfang" "Eclipse Edge" "Sledgehammer" "Hexblade" "Whispering Shadows" "Longsword of the Watery Tart" "Sovereign Sigil Spear" "Lightsaber")
    ARMOR=("Generic Armor" "Brown Pants" "Glass Armor" "Doom Armor" "Emberplate" "Spider Silk Armor" "Bikini Armor" "Tactical Vest" "Space Suit" "Leather Boots" "Protective Elite Tactical Armor")
    TOOLS=("MIND Tool" "SENSE Tool" "BODY Tool" "Energy Drink" "Metal Detector" "Movable Mansion" "Laser Pointer" "Comprehensive Medkit" "Performance Enhancing Drugs" "Scope" "Titan Coil" "Portable Hole" "Chronicle of Echoing Futures" "Solar Nexus Cell" "Pocket of Holding" "Cellphone" "Energized Performance Drugs")

    # Rarity weights (probabilities for selecting a rarity)
    RARITY_WEIGHTS=(25 25 25 25)  # Ranged: 25%, Melee: 25%, Armor: 25%, Tools: 25%

    # Rarity categories (for reference)
    RARITIES=("Ranged" "Melee" "Armor" "Tools")

    # Temporary pools to track remaining items
    local TEMP_RANGED=("${RANGED[@]}")
    local TEMP_MELEE=("${MELEE[@]}")
    local TEMP_ARMOR=("${ARMOR[@]}")
    local TEMP_TOOLS=("${TOOLS[@]}")

    # Calculate the total weight for rarities
    local TOTAL_RARITY_WEIGHT=0
    for weight in "${RARITY_WEIGHTS[@]}"; do
        TOTAL_RARITY_WEIGHT=$((TOTAL_RARITY_WEIGHT + weight))
    done

    # Generate loot drops
    echo "Generating $num_drops unique loot drop(s):"
    for ((drop=1; drop<=num_drops; drop++)); do
        # If all pools are empty, stop
        if [[ ${#TEMP_RANGED[@]} -eq 0 && ${#TEMP_MELEE[@]} -eq 0 && ${#TEMP_ARMOR[@]} -eq 0 && ${#TEMP_TOOLS[@]} -eq 0 ]]; then
            echo "No more items left in the loot pools!"
            break
        fi

        # Randomly select rarity
        local RANDOM_RARITY=$((RANDOM % TOTAL_RARITY_WEIGHT + 1))
        local current_rarity_weight=0
        local SELECTED_RARITY=""
        local LOOT_POOL=()

        for i in "${!RARITY_WEIGHTS[@]}"; do
            current_rarity_weight=$((current_rarity_weight + RARITY_WEIGHTS[i]))
            if (( RANDOM_RARITY <= current_rarity_weight )); then
                SELECTED_RARITY=${RARITIES[i]}
                case $SELECTED_RARITY in
                    "Ranged") LOOT_POOL=("${TEMP_RANGED[@]}") ;;
                    "Melee") LOOT_POOL=("${TEMP_MELEE[@]}") ;;
                    "Armor") LOOT_POOL=("${TEMP_ARMOR[@]}") ;;
                    "Tools") LOOT_POOL=("${TEMP_TOOLS[@]}") ;;
                esac
                break
            fi
        done

        # Skip to the next iteration if the selected pool is empty
        if [[ ${#LOOT_POOL[@]} -eq 0 ]]; then
            ((drop--))  # Retry this drop
            continue
        fi

        # Randomly select an item from the chosen rarity pool
        local RANDOM_INDEX=$((RANDOM % ${#LOOT_POOL[@]}))
        local RANDOM_ITEM=${LOOT_POOL[RANDOM_INDEX]}

        # Output the loot drop
        echo "  Drop $drop: $SELECTED_RARITY - $RANDOM_ITEM"

        # Remove the item from the temporary pool
        case $SELECTED_RARITY in
            "Ranged") TEMP_RANGED=("${TEMP_RANGED[@]:0:RANDOM_INDEX}" "${TEMP_RANGED[@]:RANDOM_INDEX+1}") ;;
            "Melee") TEMP_MELEE=("${TEMP_MELEE[@]:0:RANDOM_INDEX}" "${TEMP_MELEE[@]:RANDOM_INDEX+1}") ;;
            "Armor") TEMP_ARMOR=("${TEMP_ARMOR[@]:0:RANDOM_INDEX}" "${TEMP_ARMOR[@]:RANDOM_INDEX+1}") ;;
            "Tools") TEMP_TOOLS=("${TEMP_TOOLS[@]:0:RANDOM_INDEX}" "${TEMP_TOOLS[@]:RANDOM_INDEX+1}") ;;
        esac
    done
}
